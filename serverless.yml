
service: xray2elasticsearch


frameworkVersion: ">1.3.0 <3.0.0"

provider:
  name: aws
  stage: ${opt:stage, 'production'}
  runtime: python3.7
  versionFunctions: false
  deploymentBucket:
    name: ${env:DEPLOYMENT_BUCKET}
    blockPublicAccess: true

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    # dockerizePip: true
    zip: true
    slim: false
  # dependsOn:
  #   enabled: true
  #   chains: 3

package:
  excludeDevDependencies: true
  # individually: true
  exclude:
    - .circleci/**
    - .vscode/**
    - test/**
    - developer-eggs/**
    - node_modules/**
    - Dockerfile
    - Makefile
    - README.md

functions:
  consumer:
    handler: handler/consumer.execute
    timeout: 900
    reservedConcurrency: 1
    memorySize: 512
    role: xrayConsumerRole
    environment:
      SQS_QUEUE_URL: ${env:SQS_QUEUE_URL}
      SSM_PARAMETER_NAME: "xray-to-elasticsearch-date-consumption"
    events:
      - schedule:
        rate: rate(10 minutes)
  ingestor:
    handler: handler/ingestor.execute
    timeout: 15
    reservedConcurrency: 1
    role: xrayConsumerRole
    memorySize: 128
    environment:
      ES_HOST: ${env:ES_HOST, ''}
      ES_INDEX: ${env:ES_INDEX, 'xray'}
    events:
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${env:SQS_QUEUE_NAME}

resources:
  Resources:
    xrayConsumerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: xrayConsumerRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: XrayConsumerPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      - - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                    - sqs:GetQueueUrl
                    - sqs:SendMessage
                    - sqs:SendMessageBatch
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - arn:aws:sqs
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - ${env:SQS_QUEUE_NAME}
                - Effect: Allow
                  Action:
                    - xray:GetTraceSummaries
                    - xray:BatchGetTraces
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                    - ssm:PutParameter
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - arn:aws:ssm
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'parameter/*'
